1,当在JSX中render列表，常见的做法是map一个数组然后render.
```
const list = [{id:'1',name:'rose'},{id:'2',name:'rose1'}];

//this example will trigger issue,it can be fixed by using item.id as key.
return (
<>
 {list.map(item:any,index)=>(
  <h5 key={index}> {item.name} </h5>
 )}
</>
)
```
2, 为什么使用索引作为key会引发Bug?该问题可以延申至React中的虚拟DOM和diff算法

如果列表不涉及删、改等操作，使用索引作为key一般不会引发Bug,反之，假设对列表进行删除、移动、新增等操作，re-render时列表顺序会出错。为什么？
  2.1 原因一： React中的虚拟DOM和真实DOM
    2.1.1 虚拟DOM实际是一个对象，可以React.createElement创建然后打印出来看到，对象里有很多属性比如type、props、$$typeof，type表示节点类型，props中包含节点各种属性。
    2.1.2 真实DOM上挂着比虚拟DOM更多的属性，所以虚拟DOM比真实DOM消耗的内存小很多。
    2.1.3 当re-render时，虚拟DOM收集好所有需要更新的节点，一次性更新，这也是为什么会有虚拟DOM的原因，一次性更新比逐次更新大量节点的效率更高。
  2.2 原因二：diff算法
      当更新节点时，会创建一个新的虚拟DOM和旧的虚拟DOM对其中的节点进行对比，key和type相同才有可能复用该节点。如果用索引作为key值，删除元素时会删错，用唯一的id则不出错。

3，React也不建议直接使用数组作为key，因为一旦数组发生变化时，会产生稳定性和重新渲染问题
4, 扩展：隐藏和删除DOM有什么区别?性能上哪个更好？
   传送门：https://stackoverflow.com/questions/69009266/react-hiding-vs-removing-components
